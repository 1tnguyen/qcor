#!/usr/bin/env python3
import argparse, sys, os, subprocess, mimetypes, re

def main(argv=None):
    compiler = '@CMAKE_CXX_COMPILER@'
    verbose=False
    baseLibs = ['-rdynamic', '-Wl,-rpath,@CMAKE_INSTALL_PREFIX@/lib',
                            '-L', '@CMAKE_INSTALL_PREFIX@/lib', '-lxacc',
                            '-lqcor', '-lCppMicroServices',
                            '-lxacc-quantum-gate',
                            '-lxacc-pauli']
    baseIncludes = ['-I', '@CMAKE_INSTALL_PREFIX@/include/xacc', '-I', '@CMAKE_INSTALL_PREFIX@/include/qcor']

    # Need to know if this is compile-only
    compileOnly = '-c' in sys.argv[1:]

    keepSrcFiles = False
    if '--keep-temp-source' in sys.argv[1:]:
        keepSrcFiles = True
        sys.argv.remove('--keep-temp-source')

    if '--qcor-verbose' in sys.argv[1:]:
        verbose=True
        sys.argv.remove('--qcor-verbose')

    qcordriver = 'qcor-driver'
    if '--qcor-driver-path' in sys.argv[1:]:
        pidx = sys.argv.index('--qcor-driver-path')
        p = sys.argv[pidx+1]
        qcordriver = p + '/' + qcordriver
        sys.argv.remove('--qcor-driver-path')
        sys.argv.remove(p)

    hasAcc = False
    accName = ''
    if '--accelerator' in sys.argv[1:]:
        hasAcc = True
        accidx = sys.argv.index('--accelerator')
        accName = sys.argv[accidx+1]
        sys.argv.remove(accName)
        sys.argv.remove('--accelerator')
    if '-a' in sys.argv[1:]:
        hasAcc = True
        accidx = sys.argv.index('-a')
        accName = sys.argv[accidx+1]
        sys.argv.remove(accName)
        sys.argv.remove('-a')

    filename = ''
    fileType = ''
    for arg in sys.argv[1:]:
        if os.path.isfile(arg) and '.o' != os.path.splitext(arg)[1]:
            filename = arg
            fileType = mimetypes.guess_type(filename)[0]

    if fileType == 'text/x-c++src':
        fileIdx = sys.argv[1:].index(filename)
        tmpFileName = os.path.basename(filename)
        # Move tmpFileName to end of list
        sys.argv.remove(tmpFileName)
        sys.argv.append(tmpFileName)

        idx = tmpFileName.find('.')
        expectedFile = '.'+tmpFileName[:idx]+'_out'+tmpFileName[idx:]
        sys.argv[0] = qcordriver
        if hasAcc:
            commands = [sys.argv[0]] + baseIncludes + ['--accelerator',accName] + sys.argv[1:]
        else:
            commands = [sys.argv[0]] + baseIncludes + sys.argv[1:]

        if verbose:
            print('QCOR Driver: ', ' '.join([c for c in commands]))
        try:
            result = subprocess.run(commands, check=True)
        except subprocess.CalledProcessError as e:
            print(e.output)
            print(e.returncode)
            return e.returncode

        if os.path.exists(expectedFile):
            # need to compile now with standard compiler
            sys.argv[0] = compiler
            sys.argv[-1] = expectedFile
            commands = [sys.argv[0]]
            baseLibs = []
            if not compileOnly:
                baseLibs = ['-rdynamic', '-Wl,-rpath,@CMAKE_INSTALL_PREFIX@/lib',
                            '-L', '@CMAKE_INSTALL_PREFIX@/lib', '-lxacc',
                            '-lqcor', '-lCppMicroServices',
                            '-lxacc-quantum-gate',
                            '-lxacc-pauli']


            if verbose:
                print('Generated New file: ', ' '.join([c for c in sys.argv+baseIncludes+baseLibs]))
            try:
                result = subprocess.run(sys.argv+baseIncludes+baseLibs, check=True)
            except subprocess.CalledProcessError as e:
                print(e.output)
                print(e.returncode)
                return e.returncode

            if not keepSrcFiles:
                os.remove(expectedFile)

        else:
            # This means that there were no quantum kernels
            sys.argv[0] = compiler
            print('Was not a hybrid quantum-classical code. Will compile with ', compiler)
            print('Running: ', ' '.join([c for c in sys.argv]))
            try:
                result = subprocess.run(sys.argv, check=True)
            except subprocess.CalledProcessError as e:
                print(e.output)
                print(e.returncode)
                return e.returncode

    else:
        # delegate anything else to classical compiler
        if verbose:
            print('Running: ', ' '.join([c for c in sys.argv]))
        sys.argv[0] = compiler

        try:
            result = subprocess.run(sys.argv+baseLibs, check=True)
        except subprocess.CalledProcessError as e:
            print(e.output)
            print(e.returncode)
            return e.returncode

    return 0

if __name__ == "__main__":
    sys.exit(main())
