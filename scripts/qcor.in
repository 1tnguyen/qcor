#!/usr/bin/env python3
import argparse
import sys
import subprocess


def parse_args(args):
    parser = argparse.ArgumentParser(description="QCOR Quantum-Classical C++ Compiler.",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     fromfile_prefix_chars='@')
    parser.add_argument(
        'file', help='The quantum-classical C++ file to compile.')
    parser.add_argument("-a", "--accelerator", type=str,
                        help="The target quantum accelerator", required=False)
    parser.add_argument("-I", '--include', action='append', type=str,
                        help="Extra include paths to search", required=False)
    parser.add_argument("-o", '--output', type=str,
                        help="Name of output binary", required=False)
    parser.add_argument("-v", '--verbose', action='store_true',
                        help="Print verbose compiler output.", required=False)
    parser.add_argument("--keep-tmp-src", action='store_true',
                        help="Keep qcor generated hidden source file.", required=False)

    opts = parser.parse_args(args)

    return opts


def main(argv=None):
    opts = parse_args(sys.argv[1:])

    command = ["qcor-driver"]
    includes = []
    if opts.include:
        for include in opts.include:
            includes.append('-I'+include)

    command += includes

    if opts.accelerator:
        command += ['--accelerator', opts.accelerator]


    baseIncludes = ['-I', '@CMAKE_INSTALL_PREFIX@/include/xacc', '-I', '@CMAKE_INSTALL_PREFIX@/include/quantum/gate',
                '-I', '@CMAKE_INSTALL_PREFIX@/include/cppmicroservices4', '-I', '@CMAKE_INSTALL_PREFIX@/include/qcor']
    baseLibs = ['-L', '@CMAKE_INSTALL_PREFIX@/lib', '-lxacc',
                '-lqcor', '-lCppMicroServices', '-lxacc-quantum-gate', '-lxacc-pauli']

    command += [opts.file]
    if opts.verbose:
        command += ['-v']

    print(command)
    try:
        result = subprocess.run(command, check=True)
    except subprocess.CalledProcessError as e:
        print(e.output)
        print(e.returncode)
        return e.returncode

    command.clear()

    command = ['@CLANG_COMPILER@', '-std=c++11', '-Wl,-rpath,@CMAKE_INSTALL_PREFIX@/lib']
    command += includes + baseIncludes + baseLibs
    command += ['.' + opts.file.replace('.','_out.')]

    if opts.output:
        command += ['-o', opts.output]

    print('Final command', command)
    try:
        result = subprocess.run(command, check=True)
    except subprocess.CalledProcessError as e:
        print(e.output)
        print(e.returncode)
        return e.returncode

    if opts.keep_tmp_src == None:
        os.remove('.'+opts.file.replace('.','_out.'))
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
