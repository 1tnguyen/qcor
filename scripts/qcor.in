#!/usr/bin/env python3
import argparse, sys, os, subprocess, mimetypes, re
# echo 'compiling' && time $HOME/.llvm/bin/clang++ -std=c++14 -fplugin=$HOME/.xacc/clang-plugins/libqcor-xasm-handler.so 
# -I $HOME/.xacc/include/xacc -I $HOME/.xacc/include/qcor -c ../handlers/examples/deuteronH2.cpp -o test.o && echo 
# 'linking' && $HOME/.llvm/bin/clang++ -rdynamic -Wl,-rpath,$HOME/.xacc/lib -L $HOME/.xacc/lib -lxacc -lCppMicroServices 
# -lstdc++ -lqcor -lxacc-pauli test.o -o test.exe

def main(argv=None):
    compiler = '@CLANG_EXECUTABLE@'
    verbose=False
    baseLibs = ['-rdynamic', '-Wl,-rpath,@CMAKE_INSTALL_PREFIX@/lib',
                            '-L', '@CMAKE_INSTALL_PREFIX@/lib', '-lxacc',
                            '-lqcor', '-lCppMicroServices',
                            '-lxacc-quantum-gate',
                            '-lxacc-pauli']
    baseIncludes = ['-I', '@CMAKE_INSTALL_PREFIX@/include/xacc', '-I', '@CMAKE_INSTALL_PREFIX@/include/qcor']
    defaultFlags = ['-std=c++14', '-fplugin=@CMAKE_INSTALL_PREFIX@/clang-plugins/libqcor-syntax-handler.so']

    # Need to know if this is compile-only
    compileOnly = '-c' in sys.argv[1:]

    if '--verbose' in sys.argv[1:]:
        verbose=True
        sys.argv.remove('--verbose')
    if '-v' in sys.argv[1:]:
        verbose=True
        sys.argv.remove('-v')

    sHandlerArgs = []
    # Get the QPU Backend
    accName = ''
    if '-qpu' in sys.argv[1:]:
        accidx = sys.argv.index('-qpu')
        accName = sys.argv[accidx+1]
        sys.argv.remove(accName)
        sys.argv.remove('-qpu')
        sHandlerArgs = ['-Xclang', '-plugin-arg-qcor-args', '-Xclang', '-qpu', '-Xclang', '-plugin-arg-qcor-args', '-Xclang', accName]

    # Get the shots if necessary
    shots = 0
    if '-shots' in sys.argv[1:]:
        sidx = sys.argv.index('-shots')
        shots = sys.argv[sidx+1]
        sys.argv.remove(shots)
        sys.argv.remove('-shots')
        sHandlerArgs = ['-Xclang', '-plugin-arg-qcor-args', '-Xclang', '-shots', '-Xclang', '-plugin-arg-qcor-args', '-Xclang', shots]

    # Get the filename we are compiling or the object file
    filename = ''
    fileType = ''
    for arg in sys.argv[1:]:
        if os.path.isfile(arg) and '.o' != os.path.splitext(arg)[1]:
            filename = arg
            fileType = mimetypes.guess_type(filename)[0]
            break

    # If it is a C++ file
    if fileType == 'text/x-c++src':
        fileIdx = sys.argv[1:].index(filename)
        tmpFileName = os.path.basename(filename)

        # Move tmpFileName to end of list
        sys.argv.remove(filename)
        sys.argv.append(filename)

        sys.argv[0] = compiler
        commands = [compiler] + defaultFlags + sHandlerArgs + baseIncludes
        if compileOnly:
            commands += sys.argv[1:]
        else:
            commands += baseLibs + sys.argv[1:]


        if verbose:
            print('[qcor-exec]: ', ' '.join([c for c in commands]))

        try:
            result = subprocess.run(commands, check=True)
        except subprocess.CalledProcessError as e:
            print(e.output)
            print(e.returncode)
            return e.returncode
    else:
        # This is a .o file, so execute the link phase
        commands = [compiler] + baseLibs + sys.argv[1:]
        if verbose:
            print('[qcor-exec]: ', ' '.join([c for c in commands]))
        try:
            result = subprocess.run(commands, check=True)
        except subprocess.CalledProcessError as e:
            print(e.output)
            print(e.returncode)
            return e.returncode

    return 0

if __name__ == "__main__":
    sys.exit(main())
