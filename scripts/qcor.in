#!/usr/bin/env python3
import argparse
import sys
import subprocess


def parse_args(args):
    parser = argparse.ArgumentParser(description="QCOR Quantum-Classical C++ Compiler.",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     fromfile_prefix_chars='@')
    parser.add_argument(
        'file', help='The quantum-classical C++ file to compile.')
    parser.add_argument("-a", "--accelerator", type=str,
                        help="The target quantum accelerator", required=False)
    parser.add_argument("-I", '--include', action='append', type=str,
                        help="Extra include paths to search", required=False)
    parser.add_argument("-o", '--output', type=str,
                        help="Name of output binary", required=False)
    parser.add_argument("-v", '--verbose', action='store_true',
                        help="Print verbose compiler output.", required=False)

    opts = parser.parse_args(args)

    return opts


def main(argv=None):
    opts = parse_args(sys.argv[1:])

    command = ["@CLANG_COMPILER@", '-std=c++11', '-Wl,-rpath,@CMAKE_INSTALL_PREFIX@/lib', '-Xclang', '-load', '-Xclang', '@CMAKE_INSTALL_PREFIX@/lib/libqcor-ast-plugin.so',
               '-Xclang', '-add-plugin', '-Xclang', 'enable-quantum']
    if opts.accelerator:
        command += ['-plugin-arg-enable-quantum', '-Xclang', 'accelerator', '-Xclang',
                    '-plugin-arg-enable-quantum', '-Xclang', opts.accelerator]

    command += ['-I', '@CMAKE_INSTALL_PREFIX@/include/xacc', '-I', '@CMAKE_INSTALL_PREFIX@/include/quantum/gate',
                '-I', '@CMAKE_INSTALL_PREFIX@/include/cppmicroservices4', '-I', '@CMAKE_INSTALL_PREFIX@/include/qcor']
    command += ['-L', '@CMAKE_INSTALL_PREFIX@/lib', '-lxacc',
                '-lqcor', '-lCppMicroServices', '-lxacc-quantum-gate']

    command += [opts.file]
    if opts.output:
        command += ['-o', opts.output]
    if opts.verbose:
        command += ['-v']

    try:
        result = subprocess.run(command, check=True)
    except subprocess.CalledProcessError as e:
        print(e.output)
        print(e.returncode)
        return e.returncode

    return 0


if __name__ == "__main__":
    sys.exit(main())
